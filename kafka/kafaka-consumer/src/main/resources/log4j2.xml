<?xml version="1.0" encoding="UTF-8"?>
<!--
    status : 这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,会看到log4j2内部各种详细输出
    monitorInterval : Log4j能够自动检测修改配置文件和重新配置本身, 设置间隔秒数。此处表示每隔600秒重读一次配置文件
-->
<configuration status="WARN"  monitorInterval="600"  >


    <Properties>
        <!--自定义日志文件名前缀，建议使用模块/项目名称，具体的日志级别在Appenders里面配置-->
        <Property name="LOG_NAME_PREFIX">kafka_consumer_</Property>
        <!--自定义日志输出格式-->
        <Property name="patternStyle">%-5p|%-d{yyyy-MM-dd HH:mm:ss.SSS}|%C.%M.%3L|%m%n</Property>
        <!--自定义日志存放路径，建议/data/logs/项目名/子目录/*-->
        <Property name="LOG_HOME">./log</Property>
        <!--自定义日志文件生成策略,每月/每天/每小时生成新的日志文件-->
        <Property name="LOG_CREATE_INTERVAL">yyyy-MM-dd-HH-mm</Property>
        <!--自定义日志文件切分策略,大小超过阈值后创建一个新的日志文件-->
        <Property name="LOG_FILE_SIZE">1MB</Property>
        <!--自定义日志备份文件个数，如每天生成日志文件，按照大小切割后只保留最新的几个-->
        <Property name="LOG_BACK_NUM">5</Property>
        <!--自定义日志文件保存时间,超过该时间之前的清除，m代表分钟，d代表天-->
        <Property name="LOG_SAVE_TIME">3m</Property>
        <!--自定义日志级别-->
        <Property name="LOG_LEVEL">debug</Property>
    </Properties>


    <Appenders>
        <!--输出控制台的配置-->
        <console name="Console" target="SYSTEM_OUT" >
            <!--只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--输出日志的格式-->
            <PatternLayout pattern="${patternStyle}"/>
        </console>

        <!--下面配置的含义是：按照大小切分日志文件，当日志文件大于阈值时，就创建新的日志文件，旧的日志文件保留LOG_BACK_NUM个，名字后面加上一个数字做区分-->
        <!-- 打印info及以上级别的日志，fileName配置文件路径，filePattern配置文件备份策略，按照日期命名文件夹并自动归档-->
        <RollingFile name="RollingFileInfo" fileName="${LOG_HOME}/${LOG_NAME_PREFIX}info.log"
                     filePattern="${LOG_HOME}/$${date:${LOG_CREATE_INTERVAL}}/${LOG_NAME_PREFIX}info.log.%d{${LOG_CREATE_INTERVAL}}.%i">

            <!--只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--输出日志的格式-->
            <PatternLayout pattern="${patternStyle}"/>

            <!-- max配置每个策略下最多保存文件的数目，比如每天最多保存max个 -->
            <DefaultRolloverStrategy  max="${LOG_BACK_NUM}">
                <Delete basePath="${LOG_HOME}" maxDepth="2">
                    <!--age配置日志保存的时间周期，超过这个时间后自动清除，通过正则表达式来匹配需要删除的日志文件-->
                    <IfFileName glob="*/*.log*"/>
                    <IfLastModified age="${LOG_SAVE_TIME}" />
                </Delete>
            </DefaultRolloverStrategy>

            <Policies>
                <!-- 每到size大小时生成一个日志文件 -->
                <SizeBasedTriggeringPolicy size="${LOG_FILE_SIZE}"/>
            </Policies>
        </RollingFile>


        <!--打印debug级别和以上的日志，按时间切分文件，每分钟一个日志文件，超过3分钟的删除-->
        <RollingFile name="RollingFileDebug" fileName="${LOG_HOME}/${LOG_NAME_PREFIX}debug.log"
                     filePattern="${LOG_HOME}/${LOG_NAME_PREFIX}debug.log.%d{${LOG_CREATE_INTERVAL}}">

            <!--只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="${LOG_LEVEL}" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--输出日志的格式-->
            <PatternLayout pattern="${patternStyle}"/>

            <!-- max配置每个策略下最多保存文件的数目，比如每天最多保存max个 -->
            <DefaultRolloverStrategy  max="${LOG_BACK_NUM}">
                <Delete basePath="${LOG_HOME}" maxDepth="2">
                    <!--age配置日志保存的时间周期，超过这个时间后自动清除，通过正则表达式来匹配需要删除的日志文件-->
                    <IfFileName glob="*/*.log*"/>
                    <IfLastModified age="${LOG_SAVE_TIME}" />
                </Delete>
            </DefaultRolloverStrategy>
            <Policies>
                <!--按时间切换,该策略主要是完成周期性的log文件封存工作。interval指定两次封存动作之间的时间间隔。
                单位:以日志的命名精度来确定单位，比如yyyy-MM-dd-HH 单位为小时，yyyy-MM-dd-HH-mm 单位为分钟  -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
            </Policies>
        </RollingFile>

    </Appenders>

    <!-- 定义logger，logger引入的appender才会生效-->
    <loggers>
        <!--过滤掉spring的一些无用的DEBUG信息,自行配置-->
        <logger name="org.springframework" level="INFO"></logger>

        <root level="all">
            <appender-ref ref="Console"/>
            <appender-ref ref="RollingFileInfo"/>
            <appender-ref ref="RollingFileDebug"/>
        </root>
    </loggers>

</configuration>